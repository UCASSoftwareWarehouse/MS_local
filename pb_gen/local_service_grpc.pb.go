// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MSLocalClient is the client API for MSLocal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MSLocalClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	//  rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse){}
	//  rpc LoginUser(LoginUserRequest) returns(LoginUserResponse){}
	//  rpc GetUser(GetUserRequest) returns (GetUserResponse){}
	//  rpc DeleteUser(DeleteUserRequest)returns(DeleteUserResponse){}
	//  rpc UpdateUser(UpdateUserRequest) returns(UpdateUserResponse){}
	//   project
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (MSLocal_UploadClient, error)
	GetUserProjects(ctx context.Context, in *GetUserProjectsRequest, opts ...grpc.CallOption) (MSLocal_GetUserProjectsClient, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (MSLocal_DownloadClient, error)
	SearchProject(ctx context.Context, in *SearchProjectRequest, opts ...grpc.CallOption) (MSLocal_SearchProjectClient, error)
	GetCodes(ctx context.Context, in *GetCodesRequest, opts ...grpc.CallOption) (MSLocal_GetCodesClient, error)
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
}

type mSLocalClient struct {
	cc grpc.ClientConnInterface
}

func NewMSLocalClient(cc grpc.ClientConnInterface) MSLocalClient {
	return &mSLocalClient{cc}
}

func (c *mSLocalClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/pb.MSLocal/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSLocalClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, "/pb.MSLocal/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSLocalClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, "/pb.MSLocal/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSLocalClient) Upload(ctx context.Context, opts ...grpc.CallOption) (MSLocal_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &MSLocal_ServiceDesc.Streams[0], "/pb.MSLocal/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &mSLocalUploadClient{stream}
	return x, nil
}

type MSLocal_UploadClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type mSLocalUploadClient struct {
	grpc.ClientStream
}

func (x *mSLocalUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mSLocalUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mSLocalClient) GetUserProjects(ctx context.Context, in *GetUserProjectsRequest, opts ...grpc.CallOption) (MSLocal_GetUserProjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MSLocal_ServiceDesc.Streams[1], "/pb.MSLocal/GetUserProjects", opts...)
	if err != nil {
		return nil, err
	}
	x := &mSLocalGetUserProjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MSLocal_GetUserProjectsClient interface {
	Recv() (*GetUserProjectsResponse, error)
	grpc.ClientStream
}

type mSLocalGetUserProjectsClient struct {
	grpc.ClientStream
}

func (x *mSLocalGetUserProjectsClient) Recv() (*GetUserProjectsResponse, error) {
	m := new(GetUserProjectsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mSLocalClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (MSLocal_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &MSLocal_ServiceDesc.Streams[2], "/pb.MSLocal/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &mSLocalDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MSLocal_DownloadClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type mSLocalDownloadClient struct {
	grpc.ClientStream
}

func (x *mSLocalDownloadClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mSLocalClient) SearchProject(ctx context.Context, in *SearchProjectRequest, opts ...grpc.CallOption) (MSLocal_SearchProjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &MSLocal_ServiceDesc.Streams[3], "/pb.MSLocal/SearchProject", opts...)
	if err != nil {
		return nil, err
	}
	x := &mSLocalSearchProjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MSLocal_SearchProjectClient interface {
	Recv() (*SearchProjectResponse, error)
	grpc.ClientStream
}

type mSLocalSearchProjectClient struct {
	grpc.ClientStream
}

func (x *mSLocalSearchProjectClient) Recv() (*SearchProjectResponse, error) {
	m := new(SearchProjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mSLocalClient) GetCodes(ctx context.Context, in *GetCodesRequest, opts ...grpc.CallOption) (MSLocal_GetCodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MSLocal_ServiceDesc.Streams[4], "/pb.MSLocal/GetCodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &mSLocalGetCodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MSLocal_GetCodesClient interface {
	Recv() (*GetCodesResponse, error)
	grpc.ClientStream
}

type mSLocalGetCodesClient struct {
	grpc.ClientStream
}

func (x *mSLocalGetCodesClient) Recv() (*GetCodesResponse, error) {
	m := new(GetCodesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mSLocalClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, "/pb.MSLocal/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MSLocalServer is the server API for MSLocal service.
// All implementations must embed UnimplementedMSLocalServer
// for forward compatibility
type MSLocalServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	//  rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse){}
	//  rpc LoginUser(LoginUserRequest) returns(LoginUserResponse){}
	//  rpc GetUser(GetUserRequest) returns (GetUserResponse){}
	//  rpc DeleteUser(DeleteUserRequest)returns(DeleteUserResponse){}
	//  rpc UpdateUser(UpdateUserRequest) returns(UpdateUserResponse){}
	//   project
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	Upload(MSLocal_UploadServer) error
	GetUserProjects(*GetUserProjectsRequest, MSLocal_GetUserProjectsServer) error
	Download(*DownloadRequest, MSLocal_DownloadServer) error
	SearchProject(*SearchProjectRequest, MSLocal_SearchProjectServer) error
	GetCodes(*GetCodesRequest, MSLocal_GetCodesServer) error
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	mustEmbedUnimplementedMSLocalServer()
}

// UnimplementedMSLocalServer must be embedded to have forward compatible implementations.
type UnimplementedMSLocalServer struct {
}

func (UnimplementedMSLocalServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedMSLocalServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedMSLocalServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedMSLocalServer) Upload(MSLocal_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedMSLocalServer) GetUserProjects(*GetUserProjectsRequest, MSLocal_GetUserProjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserProjects not implemented")
}
func (UnimplementedMSLocalServer) Download(*DownloadRequest, MSLocal_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedMSLocalServer) SearchProject(*SearchProjectRequest, MSLocal_SearchProjectServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchProject not implemented")
}
func (UnimplementedMSLocalServer) GetCodes(*GetCodesRequest, MSLocal_GetCodesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCodes not implemented")
}
func (UnimplementedMSLocalServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedMSLocalServer) mustEmbedUnimplementedMSLocalServer() {}

// UnsafeMSLocalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MSLocalServer will
// result in compilation errors.
type UnsafeMSLocalServer interface {
	mustEmbedUnimplementedMSLocalServer()
}

func RegisterMSLocalServer(s grpc.ServiceRegistrar, srv MSLocalServer) {
	s.RegisterService(&MSLocal_ServiceDesc, srv)
}

func _MSLocal_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSLocalServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MSLocal/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSLocalServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSLocal_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSLocalServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MSLocal/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSLocalServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSLocal_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSLocalServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MSLocal/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSLocalServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSLocal_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MSLocalServer).Upload(&mSLocalUploadServer{stream})
}

type MSLocal_UploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type mSLocalUploadServer struct {
	grpc.ServerStream
}

func (x *mSLocalUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mSLocalUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MSLocal_GetUserProjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUserProjectsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MSLocalServer).GetUserProjects(m, &mSLocalGetUserProjectsServer{stream})
}

type MSLocal_GetUserProjectsServer interface {
	Send(*GetUserProjectsResponse) error
	grpc.ServerStream
}

type mSLocalGetUserProjectsServer struct {
	grpc.ServerStream
}

func (x *mSLocalGetUserProjectsServer) Send(m *GetUserProjectsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MSLocal_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MSLocalServer).Download(m, &mSLocalDownloadServer{stream})
}

type MSLocal_DownloadServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type mSLocalDownloadServer struct {
	grpc.ServerStream
}

func (x *mSLocalDownloadServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MSLocal_SearchProject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchProjectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MSLocalServer).SearchProject(m, &mSLocalSearchProjectServer{stream})
}

type MSLocal_SearchProjectServer interface {
	Send(*SearchProjectResponse) error
	grpc.ServerStream
}

type mSLocalSearchProjectServer struct {
	grpc.ServerStream
}

func (x *mSLocalSearchProjectServer) Send(m *SearchProjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MSLocal_GetCodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCodesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MSLocalServer).GetCodes(m, &mSLocalGetCodesServer{stream})
}

type MSLocal_GetCodesServer interface {
	Send(*GetCodesResponse) error
	grpc.ServerStream
}

type mSLocalGetCodesServer struct {
	grpc.ServerStream
}

func (x *mSLocalGetCodesServer) Send(m *GetCodesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MSLocal_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSLocalServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MSLocal/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSLocalServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MSLocal_ServiceDesc is the grpc.ServiceDesc for MSLocal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MSLocal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MSLocal",
	HandlerType: (*MSLocalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _MSLocal_SayHello_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _MSLocal_CreateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _MSLocal_DeleteProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _MSLocal_GetProject_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _MSLocal_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetUserProjects",
			Handler:       _MSLocal_GetUserProjects_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _MSLocal_Download_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchProject",
			Handler:       _MSLocal_SearchProject_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCodes",
			Handler:       _MSLocal_GetCodes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "local_service.proto",
}
